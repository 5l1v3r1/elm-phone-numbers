const xml2js = require ('xml2js');
const fs = require('fs');

const dbString = fs.readFileSync('phone_db.xml', 'utf-8');
const targetPath = 'src/PhoneNumbers/Countries.elm';

const header = `
module PhoneNumbers.Countries exposing (..)

{-| This file is auto generated. Do not edit this file directly.
-}

import PhoneNumbers
`;

const parseOptions = {
  trim: true,
  explicitRoot: false
};

xml2js.parseString(dbString, parseOptions, (err, result) => {
  if (err) {
    console.log(err);
    return;
  }

  const converted = result.territories[0].territory
        .filter(filterTerritory)
        .map(territoryToJSON)
        .map(elmify)
        .join('');

  const countryFileContent = header + converted;
  fs.writeFileSync(targetPath, countryFileContent, 'utf-8');
});

function filterTerritory(territory) {
  return isNaN(territory.$.id);
}

function territoryToJSON(territory) {
  return {
    id: territory.$.id,
    countryCode: territory.$.countryCode,
    internationalPrefix: territory.$.internationalPrefix,
    nationalPrefix: territory.$.nationalPrefix
  };
}

function elmify(territory) {
  return `
{-|-}
country${territory.id} : PhoneNumbers.Territory
country${territory.id} =
    { id = "${territory.id}"
    , countryCode = ${elmMaybe(territory.countryCode, false)}
    , internationalPrefix = ${elmMaybe(territory.internationalPrefix, true)}
    , nationalPrefix = ${elmMaybe(territory.nationalPrefix, true)}
    }
`;
}

function elmMaybe(maybeVal, isString) {
  if (maybeVal) {
    if (isString) {
      return `Just "${maybeVal.replace(/\\/g, '\\\\')}"`;
    }

    return `Just ${maybeVal}`;
  }

  return 'Nothing';
}
